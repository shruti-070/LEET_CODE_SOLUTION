class Solution 
{
    public void solveSudoku(char[][] board) 
    {
        if( board==null || board.length==0 )
            return;
        helper(board , 0 , 0);
    }
    public boolean helper(char[][] board , int row , int col) 
    {
        if(row==board.length)
        {
            return true;
        }
        
        int nrow = 0 ; //for next new row
        int ncol = 0 ; //for next new column
        
        //we increase the column length
        if(col!=board.length-1) // column length should not be exceed than board length
        {
            nrow = row;  //remains same until the column length should not be exeed
            ncol = col+1;  //Increase the size (0,1)....(0,n)
        }
        
        //we increase the row length if column ends we have to jump on the next row
        else
        {
            nrow = row+1; //(1,0)...(n,0)
            ncol = 0;
        }
        
        //check whether already there is a number or not
        
        
        if(board[row][col]!='.')
        {
            if(helper(board , nrow , ncol)) //If the number is already present then check                                                           another row and column of the board.
                return true;
        }
        else
        {
            for(int i=1 ; i<=9 ; i++)   // If number is not present then we have the safest                                             number between 1 to 9 so that no number is present in                                               same row , same column and in the same grid .
            {
                if(isSafe(board , row , col , i))
                {
                    board[row][col] = (char)(i+'0'); //type cast from integer to character and                                                      stores the value to that row and column of                                                                      the board.
                    if(helper(board , nrow , ncol)) //check another new row and column
                    {
                        return true;
                    }
                    else
                    {
                        board[row][col] = '.';
                    }
                }
            }
        }
        return false;
    }
    public boolean isSafe(char[][] board , int row , int col , int num)
    {
        for(int i=0 ; i<board.length ; i++)
        {
            if(board[i][col]==(char)(num+'0')) //check for rows if the same number is present                                                                   or not.
                return false;
        }
        for(int i=0 ; i<board.length ; i++)
        {
            if(board[row][i]==(char)(num+'0')) //check for columnns if the same number is                                                                    present or not.
                return false;
        } 
        int sr = (row/3)*3; //calculating the grid first row
        int sc = (col/3)*3; //calculating the grid first column
        int n1 = sr+3;
        int n2 = sc+3;
        for(int i=sr ; i<n1 ; i++)
        {
            for(int j=sc ; j<n2 ; j++)
            {
                if(board[i][j] == (char)(num+'0')) //Number is present then return false
                    return false;
            }
        }
        return true;
    }
}
